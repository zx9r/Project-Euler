"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number
would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
from math import sqrt


def generate_triangle_numbers():
    n = t = 1
    while True:
        yield t
        n += 1
        t += n


def calculate_divisors(n):
    divisors = []
    for i in range(1, n // 2 + 1):
        if n % i == 0:
            divisors.append(i)
    divisors.append(n)  # Self number
    return divisors


def count_divisors(n):
    n_divisors = 0
    for i in range(1, int(sqrt(n) + 1)):
        if n % i == 0:
            if n / i == i:
                n_divisors += 1
            else:
                n_divisors += 2

    return n_divisors


num_divisors = []
for triangle in generate_triangle_numbers():
    divisors = calculate_divisors(triangle)
    print("{}: {} --> {}".format(triangle, divisors, count_divisors(triangle)))
    num_divisors.append(count_divisors(triangle))
    if triangle >= 1028:
        print(num_divisors)
        break

n = t = 1
max_divisors = 0
while True:
    num_divisors = count_divisors(t)
    if num_divisors > max_divisors:
        max_divisors = num_divisors
        print("Max divisors so far {} (for triangle {})".format(max_divisors, t))
    if num_divisors >= 500:
        print("Triangle {} has {} divisors".format(t, num_divisors))
        break
    n += 1
    t += n
